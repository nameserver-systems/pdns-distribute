// Code generated by MockGen. DO NOT EDIT.
// Source: github.com/nats-io/nats.go/jetstream (interfaces: Stream)
//
// Generated by this command:
//
//	mockgen --destination internal/pkg/mocks/jetstream_stream.go --package mocks github.com/nats-io/nats.go/jetstream Stream
//

// Package mocks is a generated GoMock package.
package mocks

import (
	context "context"
	reflect "reflect"

	jetstream "github.com/nats-io/nats.go/jetstream"
	gomock "go.uber.org/mock/gomock"
)

// MockStream is a mock of Stream interface.
type MockStream struct {
	ctrl     *gomock.Controller
	recorder *MockStreamMockRecorder
}

// MockStreamMockRecorder is the mock recorder for MockStream.
type MockStreamMockRecorder struct {
	mock *MockStream
}

// NewMockStream creates a new mock instance.
func NewMockStream(ctrl *gomock.Controller) *MockStream {
	mock := &MockStream{ctrl: ctrl}
	mock.recorder = &MockStreamMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockStream) EXPECT() *MockStreamMockRecorder {
	return m.recorder
}

// CachedInfo mocks base method.
func (m *MockStream) CachedInfo() *jetstream.StreamInfo {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CachedInfo")
	ret0, _ := ret[0].(*jetstream.StreamInfo)
	return ret0
}

// CachedInfo indicates an expected call of CachedInfo.
func (mr *MockStreamMockRecorder) CachedInfo() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CachedInfo", reflect.TypeOf((*MockStream)(nil).CachedInfo))
}

// Consumer mocks base method.
func (m *MockStream) Consumer(arg0 context.Context, arg1 string) (jetstream.Consumer, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Consumer", arg0, arg1)
	ret0, _ := ret[0].(jetstream.Consumer)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Consumer indicates an expected call of Consumer.
func (mr *MockStreamMockRecorder) Consumer(arg0, arg1 any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Consumer", reflect.TypeOf((*MockStream)(nil).Consumer), arg0, arg1)
}

// ConsumerNames mocks base method.
func (m *MockStream) ConsumerNames(arg0 context.Context) jetstream.ConsumerNameLister {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ConsumerNames", arg0)
	ret0, _ := ret[0].(jetstream.ConsumerNameLister)
	return ret0
}

// ConsumerNames indicates an expected call of ConsumerNames.
func (mr *MockStreamMockRecorder) ConsumerNames(arg0 any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ConsumerNames", reflect.TypeOf((*MockStream)(nil).ConsumerNames), arg0)
}

// CreateConsumer mocks base method.
func (m *MockStream) CreateConsumer(arg0 context.Context, arg1 jetstream.ConsumerConfig) (jetstream.Consumer, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateConsumer", arg0, arg1)
	ret0, _ := ret[0].(jetstream.Consumer)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CreateConsumer indicates an expected call of CreateConsumer.
func (mr *MockStreamMockRecorder) CreateConsumer(arg0, arg1 any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateConsumer", reflect.TypeOf((*MockStream)(nil).CreateConsumer), arg0, arg1)
}

// CreateOrUpdateConsumer mocks base method.
func (m *MockStream) CreateOrUpdateConsumer(arg0 context.Context, arg1 jetstream.ConsumerConfig) (jetstream.Consumer, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateOrUpdateConsumer", arg0, arg1)
	ret0, _ := ret[0].(jetstream.Consumer)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CreateOrUpdateConsumer indicates an expected call of CreateOrUpdateConsumer.
func (mr *MockStreamMockRecorder) CreateOrUpdateConsumer(arg0, arg1 any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateOrUpdateConsumer", reflect.TypeOf((*MockStream)(nil).CreateOrUpdateConsumer), arg0, arg1)
}

// DeleteConsumer mocks base method.
func (m *MockStream) DeleteConsumer(arg0 context.Context, arg1 string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeleteConsumer", arg0, arg1)
	ret0, _ := ret[0].(error)
	return ret0
}

// DeleteConsumer indicates an expected call of DeleteConsumer.
func (mr *MockStreamMockRecorder) DeleteConsumer(arg0, arg1 any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteConsumer", reflect.TypeOf((*MockStream)(nil).DeleteConsumer), arg0, arg1)
}

// DeleteMsg mocks base method.
func (m *MockStream) DeleteMsg(arg0 context.Context, arg1 uint64) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeleteMsg", arg0, arg1)
	ret0, _ := ret[0].(error)
	return ret0
}

// DeleteMsg indicates an expected call of DeleteMsg.
func (mr *MockStreamMockRecorder) DeleteMsg(arg0, arg1 any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteMsg", reflect.TypeOf((*MockStream)(nil).DeleteMsg), arg0, arg1)
}

// GetLastMsgForSubject mocks base method.
func (m *MockStream) GetLastMsgForSubject(arg0 context.Context, arg1 string) (*jetstream.RawStreamMsg, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetLastMsgForSubject", arg0, arg1)
	ret0, _ := ret[0].(*jetstream.RawStreamMsg)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetLastMsgForSubject indicates an expected call of GetLastMsgForSubject.
func (mr *MockStreamMockRecorder) GetLastMsgForSubject(arg0, arg1 any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetLastMsgForSubject", reflect.TypeOf((*MockStream)(nil).GetLastMsgForSubject), arg0, arg1)
}

// GetMsg mocks base method.
func (m *MockStream) GetMsg(arg0 context.Context, arg1 uint64, arg2 ...jetstream.GetMsgOpt) (*jetstream.RawStreamMsg, error) {
	m.ctrl.T.Helper()
	varargs := []any{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "GetMsg", varargs...)
	ret0, _ := ret[0].(*jetstream.RawStreamMsg)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetMsg indicates an expected call of GetMsg.
func (mr *MockStreamMockRecorder) GetMsg(arg0, arg1 any, arg2 ...any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]any{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetMsg", reflect.TypeOf((*MockStream)(nil).GetMsg), varargs...)
}

// Info mocks base method.
func (m *MockStream) Info(arg0 context.Context, arg1 ...jetstream.StreamInfoOpt) (*jetstream.StreamInfo, error) {
	m.ctrl.T.Helper()
	varargs := []any{arg0}
	for _, a := range arg1 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "Info", varargs...)
	ret0, _ := ret[0].(*jetstream.StreamInfo)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Info indicates an expected call of Info.
func (mr *MockStreamMockRecorder) Info(arg0 any, arg1 ...any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]any{arg0}, arg1...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Info", reflect.TypeOf((*MockStream)(nil).Info), varargs...)
}

// ListConsumers mocks base method.
func (m *MockStream) ListConsumers(arg0 context.Context) jetstream.ConsumerInfoLister {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ListConsumers", arg0)
	ret0, _ := ret[0].(jetstream.ConsumerInfoLister)
	return ret0
}

// ListConsumers indicates an expected call of ListConsumers.
func (mr *MockStreamMockRecorder) ListConsumers(arg0 any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListConsumers", reflect.TypeOf((*MockStream)(nil).ListConsumers), arg0)
}

// OrderedConsumer mocks base method.
func (m *MockStream) OrderedConsumer(arg0 context.Context, arg1 jetstream.OrderedConsumerConfig) (jetstream.Consumer, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "OrderedConsumer", arg0, arg1)
	ret0, _ := ret[0].(jetstream.Consumer)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// OrderedConsumer indicates an expected call of OrderedConsumer.
func (mr *MockStreamMockRecorder) OrderedConsumer(arg0, arg1 any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "OrderedConsumer", reflect.TypeOf((*MockStream)(nil).OrderedConsumer), arg0, arg1)
}

// Purge mocks base method.
func (m *MockStream) Purge(arg0 context.Context, arg1 ...jetstream.StreamPurgeOpt) error {
	m.ctrl.T.Helper()
	varargs := []any{arg0}
	for _, a := range arg1 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "Purge", varargs...)
	ret0, _ := ret[0].(error)
	return ret0
}

// Purge indicates an expected call of Purge.
func (mr *MockStreamMockRecorder) Purge(arg0 any, arg1 ...any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]any{arg0}, arg1...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Purge", reflect.TypeOf((*MockStream)(nil).Purge), varargs...)
}

// SecureDeleteMsg mocks base method.
func (m *MockStream) SecureDeleteMsg(arg0 context.Context, arg1 uint64) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "SecureDeleteMsg", arg0, arg1)
	ret0, _ := ret[0].(error)
	return ret0
}

// SecureDeleteMsg indicates an expected call of SecureDeleteMsg.
func (mr *MockStreamMockRecorder) SecureDeleteMsg(arg0, arg1 any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SecureDeleteMsg", reflect.TypeOf((*MockStream)(nil).SecureDeleteMsg), arg0, arg1)
}

// UpdateConsumer mocks base method.
func (m *MockStream) UpdateConsumer(arg0 context.Context, arg1 jetstream.ConsumerConfig) (jetstream.Consumer, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UpdateConsumer", arg0, arg1)
	ret0, _ := ret[0].(jetstream.Consumer)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// UpdateConsumer indicates an expected call of UpdateConsumer.
func (mr *MockStreamMockRecorder) UpdateConsumer(arg0, arg1 any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateConsumer", reflect.TypeOf((*MockStream)(nil).UpdateConsumer), arg0, arg1)
}
